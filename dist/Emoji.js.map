{"version":3,"sources":["../src/js/Emoji.js"],"names":["Emoji","data","category","callback","emoji","setCallback","min","max","Math","floor","random","colors","randomIntFromInterval","length","has_apple_img","has_google_img","has_twitter_img","has_emojione_img","full_name","short_name","short_names","sort_order","hover_color","random_color","$emoji","getEmojiForPlatform","_bubble","undefined","_onClick","_onHover","withUnified","replace_colons","getColons","withImage","$image","getImage","hasClass","find","codepoints","getCodepoints","test","arr","split","one","two","String","fromCodePoint","emote","withEnvironment","_getWrapper","append","getCharacter","_getPreviewWrapper","get","innerHTML","regexp","name","off","on","events","SELECTED","EMOJI_MOUSEENTER","EMOJI_MOUSELEAVE","replace_mode"],"mappings":"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","file":"Emoji.js","sourcesContent":["import Converters from \"./Converters\";\nimport $ from \"jquery\";\nimport defaults from \"./defaults\";\nimport \"./polyfills\";\n\nexport default class Emoji {\n\n    static factory(data, category, callback){\n        const emoji = new Emoji(data, category);\n        emoji.setCallback(callback);\n        return emoji;\n    }\n\n    static get random_color (){\n        const colors = [\"blue\", \"yellow\", \"green\", \"orange\", \"indigo\", \"pink\"];\n        return colors[Emoji.randomIntFromInterval(0, colors.length - 1)];\n    }\n\n    /**\n     * @link http://stackoverflow.com/questions/4959975/generate-random-number-between-two-numbers-in-javascript\n     * @param min\n     * @param max\n     * @returns {number}\n     */\n    static randomIntFromInterval(min,max) {\n        return Math.floor(Math.random()*(max-min+1)+min);\n    }\n\n    constructor(data, category){\n\n        /**\n         * @type {Boolean}\n         */\n        this.has_apple_img    = data['has_img_apple'];\n\n        /**\n         * @type {Boolean}\n         */\n        this.has_google_img   = data['has_img_google'];\n\n        /**\n         * @type {Boolean}\n         */\n        this.has_twitter_img  = data['has_img_twitter'];\n\n        /**\n         * @type {Boolean}\n         */\n        this.has_emojione_img = data['has_img_emojione'];\n\n        /**\n         * @type {String} - the name of the category\n         */\n        this.category         = category;\n\n        /**\n         * @type {String}\n         */\n        this.full_name        = data['name'];\n\n        /**\n         * @type {String}\n         */\n        this.short_name       = data['short_name'];\n\n        /**\n         * @type {String[]}\n         */\n        this.short_names      = data['short_names'];\n\n        /**\n         * @type {Number}\n         */\n        this.sort_order       = data['sort_order'];\n\n        /**\n         * @type {String}\n         */\n        this.hover_color      = Emoji.random_color;\n\n        /**\n         * Gets the emoji for the\n         * @type {string}\n         */\n        this.$emoji           = this.getEmojiForPlatform();\n\n        /**\n         * Callback executed when the emoji was clicked\n         *\n         * @type {Function|undefined}\n         * @private\n         */\n        this._bubble        = undefined;\n        //Set a click listener on the emoji\n        this._onClick()\n            ._onHover();\n    }\n\n    /**\n     * Getter for the emoji's colon syntax\n     *\n     * @returns {string}\n     */\n    getColons () {\n        return `:${this.short_name}:`;\n    }\n\n    /**\n     * Getter for the unicode emoji\n     *\n     * @returns {string}\n     */\n    getUnified () {\n        return Converters.withUnified().replace_colons(this.getColons());\n    }\n\n    /**\n     * Gets the image representation of an emoji\n     *\n     * @returns {string}\n     */\n    getImage () {\n        return Converters.withImage().replace_colons(this.getColons());\n    }\n\n    /**\n     * @return {String} Codepoints for the emoji\n     */\n    getCodepoints (){\n        const $image = $(this.getImage());\n        if($image.hasClass('emoji-inner')){\n            return $image.data('codepoints');\n        }\n\n        return $image.find('.emoji-inner').data('codepoints');\n    }\n\n    /**\n     * Getter for the emoji character regardless of the platform.\n     *\n     * @returns {string}\n     */\n    getCharacter() {\n        const codepoints = this.getCodepoints();\n        if(/-/g.test(codepoints)){\n            const arr = codepoints.split(\"-\");\n            const one = `0x${arr[0]}`;\n            const two = `0x${arr[1]}`;\n            return String.fromCodePoint(one,two);\n        }\n        return String.fromCodePoint(`0x${codepoints}`);\n    }\n\n    /**\n     * Determines if the environment supports unified unicode.\n     *\n     * @returns {boolean}\n     */\n    static supportsUnified (){\n        return Converters.withEnvironment().replace_mode === \"unified\";\n    }\n\n    /**\n     * Gets the platform-appropriate representation of the emoji.\n     *\n     * @return {string|jQuery}\n     */\n    getEmojiForPlatform(){\n\n        const emote = Converters.withEnvironment()\n                                .replace_colons(this.getColons());\n\n        return this._getWrapper().append(this.getCharacter());\n    }\n\n    /**\n     *\n     * @returns {*}\n     */\n    getPreview(){\n        const emote = Converters.withEnvironment()\n                                .replace_colons(this.getColons());\n\n        return this._getPreviewWrapper().append(emote);\n    }\n\n    /**\n     * Getter for the class' markup\n     *\n     * @returns {string}\n     */\n    getMarkup() {\n        return this.$emoji;\n    }\n\n    /**\n     * Gets the html of an emoji for things like pasting\n     * raw html into the contenteditable.\n     *\n     * @return {String}\n     */\n    getHtml() {\n        return this.$emoji.get(0).innerHTML;\n    }\n\n    /**\n     * Sets the callback that gets executed when the emoji gets clicked\n     *\n     * @param {Function} callback\n     * @returns {Emoji}\n     */\n    setCallback(callback){\n        this._bubble = callback;\n        return this;\n    }\n\n    /**\n     *\n     * @param regexp\n     * @returns {undefined|String}\n     */\n    matchesSearchTerm(regexp){\n        return this.short_names.find(name => regexp.test(name));\n    }\n\n    /**\n     * Gets the wrapper for the emoji\n     *\n     * @returns {jQuery|HTMLElement}\n     * @private\n     */\n    _getWrapper(){\n        return $(`<span class = \"emoji-char-wrapper ${this.hover_color}\" data-name=\"${this.full_name}\" data-category=\"${this.category}\"></span>`);\n    }\n\n    /**\n     * Gets the wrapper for the preview\n     *\n     * @returns {jQuery|HTMLElement}\n     * @private\n     */\n    _getPreviewWrapper(){\n        return $(`<span class = \"emoji-preview-wrapper ${this.hover_color}\" data-name=\"${this.full_name}\" data-category=\"${this.category}\"></span>`);\n    }\n\n    /**\n     *\n     * @returns {Emoji}\n     * @private\n     */\n    _onClick(){\n        $(this.$emoji).off('click.emoji').on('click.emoji', event => {\n            if(this._bubble){\n                this._bubble(defaults.events.SELECTED, this);\n            }\n        });\n\n        return this;\n    }\n\n    /**\n     *\n     * @returns {Emoji}\n     * @private\n     */\n    _onHover () {\n        $(this.$emoji).off('mouseenter.emoji').on('mouseenter.emoji', () => {\n            this._bubble(defaults.events.EMOJI_MOUSEENTER, this);\n        }).off('mouseleave.emoji').on('mouseleave.emoji', () => {\n            this._bubble(defaults.events.EMOJI_MOUSELEAVE, this);\n        });\n\n        return this;\n    }\n}"]}