{"version":3,"sources":["../src/js/EmojiCategory.js"],"names":["EmojiCategory","cat","data","callback","category","setCallback","title","icon","emojis","map","factory","emote","_onEvent","bind","sort","a","b","sort_order","$category","getMarkup","$title","find","_callback","undefined","_search_term","Object","defineProperty","get","set","value","_search","_clearSearch","$content","forEach","append","emoji","action","search_term","trim","length","addClass","regexp","RegExp","toLowerCase","_canShowEmoji","matchesSearchTerm","$emoji","show","hide","removeClass","getUnified","offsetTop"],"mappings":"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","file":"EmojiCategory.js","sourcesContent":["import Emoji from \"./Emoji\";\nimport category from \"./../views/category.mustache\";\nimport $ from \"jquery\";\n\nexport default class EmojiCategory {\n\n    /**\n     * Factory function that initializes the class with a callback\n     *\n     * @param {Object} cat\n     * @param {Object} data\n     * @param {Function} callback\n     * @returns {EmojiCategory}\n     */\n    static factory(cat, data, callback){\n        const category = new EmojiCategory(cat, data);\n        category.setCallback(callback);\n        return category;\n    }\n\n    constructor(category, data){\n\n        /**\n         * @type {string}\n         */\n        this.title      = category.title;\n\n        /**\n         *\n         * @type {string}\n         */\n        this.icon       = category.icon;\n\n        /**\n         * @type {Array<Emoji>}\n         */\n        this.emojis     = data.map(\n            emote => Emoji.factory(emote, this.title, this._onEvent.bind(this))\n        ).sort(\n            (a, b) => a.sort_order - b.sort_order\n        );\n\n        /**\n         * Markup for the\n         */\n        this.$category  = this.getMarkup();\n\n        /**\n         * @type {jQuery}\n         */\n        this.$title     = this.$category.find('.category-title');\n\n        /**\n         * Callback that executes when an emoji gets selected\n         *\n         * @type {Function|undefined}\n         * @private\n         */\n        this._callback  = undefined;\n\n        let _search_term = \"\";\n        Object.defineProperty(this, 'search_term', {\n            get : () => _search_term,\n            set : value => {\n                if(_search_term !== value){\n                    _search_term = value;\n                    this._search();\n                }\n            }\n        });\n\n        this._clearSearch();\n    }\n\n    get offset_top (){\n        return this.$category.get(0).offsetTop;\n    }\n\n    /**\n     * Exports the main contents for the category\n     *\n     * @returns {{title: string, icon: string}}\n     */\n    exportContents() {\n        return {\n            title  : this.title,\n            icon   : this.icon\n        }\n    }\n\n    getMarkup(){\n        if(this.$category){\n            return this.$category;\n        }\n\n        const $category = $(category({\n            title : this.title\n        }));\n\n        const $content = $category.find('.category-content');\n\n        this.emojis.forEach(emoji => {\n            $content.append(emoji.getMarkup());\n        });\n\n        return $category;\n    }\n\n    /**\n     * Carries an event from the Emoji to the EmojiPicker instance.\n     *\n     * @param action\n     * @param emoji\n     * @private\n     */\n    _onEvent(action, emoji){\n        if(this._callback){\n            this._callback(action, emoji, this);\n        }\n    }\n\n    /**\n     *\n     * @param {Function} callback\n     * @returns {EmojiCategory}\n     */\n    setCallback(callback){\n        this._callback = callback;\n        return this;\n    }\n\n    /**\n     * Show/hide emojis based on a search term\n     * @private\n     */\n    _search(){\n        if(this.search_term.trim().length === 0){\n            this._clearSearch();\n        }\n        else{\n            this.$title.addClass('inactive');\n            const regexp = new RegExp(this.search_term.toLowerCase());\n            this.emojis.forEach(emoji => {\n                if(this._canShowEmoji(emoji) && emoji.matchesSearchTerm(regexp)){\n                  emoji.$emoji.show();\n                }\n                else{\n                    emoji.$emoji.hide();\n                }\n            });\n        }\n    }\n\n    /**\n     * Clear the effects of the search\n     *\n     * @returns {EmojiCategory}\n     * @private\n     */\n    _clearSearch() {\n        this.$title.removeClass('inactive');\n        this.emojis.forEach(emoji => {\n            if (this._canShowEmoji(emoji)) {\n              emoji.$emoji.hide();\n            } else {\n              emoji.$emoji.show();\n            }\n        });\n\n        return this;\n    }\n\n    _canShowEmoji(emoji) {\n      return emoji.getUnified().length > 4;\n    }\n}"]}